@startuml
'https://plantuml.com/class-diagram

interface ActionListener
interface KeyListener
interface Cloneable
interface Drawable
interface Movable
interface Collisionable
interface PieceFactory
interface CollisionChecker

abstract Piece
abstract Block
class Point
class GameBoard
class Tetris
class Grid
class PieceFactoryImpl

Cloneable <|.. Point
Cloneable <|... Block
Cloneable <|.. Piece
Drawable <|.. Piece
Collisionable <|.. Piece
Movable <|-- Piece

CollisionChecker <|-- CollisionCheckerImpl
Piece <|---- OTetromino
Piece <|-- ITetromino
Piece <|---- LTetromino
Piece <|-- JTetromino
Piece <|---- TTetromino
Piece <|-- ZTetromino
Piece <|---- STetromino

Point "1" --* Block
Tetris *-- GameBoard
GameBoard *-- Playfield
Playfield *-- Grid
Playfield o-- PieceFactory
Playfield o-- CollisionChecker
KeyListener <|.. Playfield
ActionListener <|.. Playfield

PieceFactory <|.. PieceFactoryImpl

class Playfield {
    grid: Grid
    currentPiece: Drawable
    drawableShapes: List<Drawable>
    pieceFactory: PieceFactory

    dropPiece(currentPiece: Piece);
}

class Grid {
    blocks: List<Block>
    getFilledRows(): List<Block>
    removeRow(row:int)
    addBlocks(blocks:List<Block>)
}

abstract Piece {
    cells: Optional<Block>[][]
    pivot: Point
    positions: Point[][]
}

class Point {
    row: int
    column: int

    addRow(int)
    addColumn(int)
}

abstract Block {
    position: Point
    width: int
    height: int
    color: Color

    setPositon(Point)
}

interface PieceFactory {
    createPiece(): T
}

class PieceFactoryImpl {
    createPiece(): Optional<Piece>
}

interface CollisionChecker<P, T> {
    check(List<P> boundaries, T piece)
}

class CollisionCheckerImpl<Point, Piece> {
    check(boundaries: List<Point>, piece: Piece): boolean
}

@enduml